const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
 
   export const courseOutline = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a study material for Python for Exam and level of difficulty will be EASY with summery of course, List of Chapters along with summery for each chapter, Topic  and all data should be  in JSON format\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"courseTitle\": \"Python for Beginners: Exam Preparation\",\n  \"difficulty\": \"Easy\",\n  \"courseSummary\": \"This course provides a foundational understanding of Python programming, suitable for beginners preparing for a basic Python exam. It covers fundamental concepts such as data types, control flow, functions, and basic data structures. The focus is on practical application and clear explanations to build a solid understanding of Python programming.\",\n  \"chapters\": [\n    {\n      \"chapterNumber\": 1,\n      \"chapterTitle\": \"Introduction to Python\",\n      \"chapterSummary\": \"This chapter introduces the basics of Python, how to set up the environment, and write your first Python program.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why learn Python?\",\n        \"Setting up the Python environment (installation)\",\n        \"Running Python scripts\",\n        \"Your first Python program (Hello, World!)\",\n         \"Basic syntax: Comments, indentation\"\n      ]\n    },\n    {\n      \"chapterNumber\": 2,\n      \"chapterTitle\": \"Data Types and Variables\",\n      \"chapterSummary\": \"This chapter focuses on different data types in Python and how to store and manipulate data using variables.\",\n      \"topics\": [\n        \"Variables: Declaration and assignment\",\n        \"Data Types: Integers, floats, strings, booleans\",\n        \"Type conversion (casting)\",\n        \"Basic arithmetic operators (+, -, *, /, %, //, **)\",\n        \"String operations (concatenation, slicing)\",\n        \"Input from the user\"\n      ]\n    },\n    {\n      \"chapterNumber\": 3,\n      \"chapterTitle\": \"Control Flow: Conditional Statements\",\n      \"chapterSummary\": \"This chapter covers how to make decisions in your code using conditional statements.\",\n      \"topics\": [\n        \"Boolean expressions and comparisons\",\n        \"if statements\",\n        \"if-else statements\",\n        \"if-elif-else statements\",\n        \"Nested if statements\"\n      ]\n    },\n       {\n      \"chapterNumber\": 4,\n      \"chapterTitle\": \"Control Flow: Loops\",\n       \"chapterSummary\": \"This chapter introduces the concept of loops and how to iterate over a sequence of items.\",\n      \"topics\": [\n        \"while loops\",\n        \"for loops\",\n        \"range() function\",\n        \"Loop control statements: break, continue\",\n        \"Looping through strings\"\n      ]\n    },\n      {\n      \"chapterNumber\": 5,\n       \"chapterTitle\": \"Working with Functions\",\n      \"chapterSummary\": \"This chapter explains the concept of functions and how to define and use them.\",\n      \"topics\": [\n          \"Defining functions using the 'def' keyword\",\n         \"Function parameters and arguments\",\n        \"Return values\",\n          \"Function calling\",\n        \"Scope of variables (local and global)\",\n        \"Basic built-in functions\"\n        \n      ]\n    },\n     {\n      \"chapterNumber\": 6,\n      \"chapterTitle\": \"Introduction to Lists\",\n      \"chapterSummary\": \"This chapter introduces lists, a basic data structure in Python to store collections of items.\",\n      \"topics\": [\n          \"Creating lists\",\n        \"Accessing list elements\",\n        \"Modifying lists (appending, inserting, deleting)\",\n        \"List slicing\",\n        \"Looping through lists\",\n        \"Basic list operations: len(), min(), max()\",\n         \"List methods: append(), insert(), remove(), pop()\"\n      ]\n    },\n    {\n      \"chapterNumber\": 7,\n      \"chapterTitle\":\"Basic File Handling\",\n       \"chapterSummary\":\"This chapter explains how to read and write from files.\",\n      \"topics\":[\n          \"Opening a file\",\n          \"Reading from a file\",\n          \"Writing to a file\",\n          \"Closing a file\",\n           \"Different File modes(read, write, append)\"\n      ]\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });
  


   export const generateNotesAIModal = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate exam material detail content for each chapter, Make sure to includes all topic point in the content, make sure to give content in HTML format (Do not Add HTMLKL, Head, Body, title tag), The\n\nchapters: {\n      \"chapterNumber\": 1,\n      \"chapterTitle\": \"Introduction to React\",\n      \"chapterSummary\": \"This chapter introduces the basics of React, what it is, and why it's used for building user interfaces.\",\n      \"topics\": [\n        \"What is React?\",\n        \"Why use React?\",\n        \"Setting up a basic React development environment (using create-react-app)\",\n        \"Understanding the virtual DOM\",\n        \"Basic structure of a React app\",\n        \"Introduction to components\"\n      ]\n    }\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n    <div>\n        <h2>Chapter 1: Introduction to React</h2>\n        <p><strong>Chapter Summary:</strong> This chapter introduces the basics of React, what it is, and why it's used for building user interfaces.</p>\n        <h3>Topics:</h3>\n        <ul>\n            <li>\n                <strong>What is React?</strong>\n                <p>\n                    <ul>\n                         <li>React is a JavaScript library, not a framework.</li>\n                        <li>Primarily used for building user interfaces (UIs), especially single-page applications.</li>\n                        <li>Developed and maintained by Facebook.</li>\n                        <li>Based on a component-based architecture.</li>\n                       <li>Emphasizes declarative programming (describing what the UI should look like).</li>\n                    </ul>\n                    </p>\n                <p><strong>Exam Content Examples:</strong></p>\n                <ul style=\"list-style-type: disc; margin-left: 20px;\">\n                    <li>Multiple choice:  \"React is a ____ developed by Facebook?\"  Options: A) framework, B) library, C) language, D) browser. Answer: B) library</li>\n                    <li>Short answer: \"Briefly explain what React is used for.\"</li>\n                </ul>\n            </li>\n            <li>\n                <strong>Why use React?</strong>\n                  <p>\n                    <ul>\n                         <li><strong>Component-Based Architecture:</strong> Promotes reusability, modularity and easier maintainability.</li>\n                        <li><strong>Virtual DOM:</strong> Enhances performance through efficient UI updates.</li>\n                        <li><strong>Declarative Programming:</strong> Simplifies UI development by focusing on desired output.</li>\n                        <li><strong>Large Ecosystem:</strong> Huge community and abundance of resources.</li>\n                       <li><strong>Cross-Platform:</strong> Can be used with React Native for mobile app development</li>\n                        <li><strong>Reusability:</strong> Ability to reuse components makes development faster.</li>\n                        <li><strong>Performance:</strong> Efficient rendering with Virtual DOM</li>\n                         <li><strong>Testability:</strong> Ease of testing components due to their modular nature</li>\n\n                    </ul>\n                    </p>\n                <p><strong>Exam Content Examples:</strong></p>\n                <ul style=\"list-style-type: disc; margin-left: 20px;\">\n                   <li> True/False: \"React uses the real DOM for rendering UI updates.\" Answer: False</li>\n                    <li>Multiple Choice: Which of the following is NOT a reason to use React? A) Component-based architecture B) Virtual DOM C) Direct DOM manipulation D) Declarative programming Answer: C</li>\n                  <li>  Short answer: \"Explain how React's component-based architecture benefits development\"</li>\n                </ul>\n            </li>\n             <li>\n                <strong>Setting up a basic React development environment (using create-react-app)</strong>\n                <p>\n                    <ul>\n                         <li><strong>Node.js and npm (or yarn) Required:</strong> Node.js must be installed.</li>\n                        <li><strong>create-react-app:</strong> A command-line tool to quickly create a React application.</li>\n                       <li><strong>Command:</strong> `npx create-react-app my-app` (or yarn create react-app my-app)</li>\n                       <li><strong>Project Structure:</strong> Includes `src` folder, `public` folder, `package.json` file, and more.</li>\n                      <li><strong>Starting Development Server:</strong>  `npm start` (or yarn start) to run a local development server.</li>\n                         <li><strong>Essential Files:</strong> Understanding of important files like `index.html`, `index.js`, and `App.js`</li>\n\n                    </ul>\n                    </p>\n                <p><strong>Exam Content Examples:</strong></p>\n                <ul style=\"list-style-type: disc; margin-left: 20px;\">\n                     <li>Multiple choice:  \"Which command is used to start the development server in a create-react-app project?\" Options: A) npm build B) npm start C) npm run dev D) npm serve Answer: B) npm start</li>\n                      <li>Fill in the blank: \"The command to create a new React project using create-react-app is ____\". Answer: npx create-react-app my-app (or yarn create react-app my-app)</li>\n                  <li>  Short Answer: What are the key steps to set up a React project using create-react-app?</li>\n\n                </ul>\n            </li>\n            <li>\n                <strong>Understanding the virtual DOM</strong>\n               <p>\n                    <ul>\n                         <li><strong>What is Virtual DOM?:</strong> A lightweight copy of the real DOM kept in memory.</li>\n                        <li><strong>Reconciliation Process:</strong> React compares the virtual DOM with the new one to find the differences.</li>\n                       <li><strong>Batch Updates:</strong> Only the necessary real DOM elements are updated.</li>\n                       <li><strong>Performance Boost:</strong> Improves app performance by reducing real DOM manipulation.</li>\n                       <li><strong>Efficient Rendering:</strong>  Faster rendering and smoother UI updates.</li>\n                    </ul>\n                    </p>\n                <p><strong>Exam Content Examples:</strong></p>\n                <ul style=\"list-style-type: disc; margin-left: 20px;\">\n                    <li>Multiple choice:  \"What is the primary purpose of the Virtual DOM in React?\" Options: A) Access server-side data B) Enhance performance by minimizing direct DOM manipulation C)  Generate HTML files D) manage routing. Answer: B) Enhance performance by minimizing direct DOM manipulation</li>\n                   <li>  Short answer: \"Explain how the virtual DOM improves application performance in React.\"</li>\n                      <li>True/False: \"The Virtual DOM is directly manipulated by the developer.\" Answer: False</li>\n                </ul>\n            </li>\n            <li>\n                <strong>Basic structure of a React app</strong>\n               <p>\n                    <ul>\n                         <li><strong>src Folder:</strong> Contains the majority of your React application code.</li>\n                        <li><strong>index.html:</strong> The main entry point for the HTML page.</li>\n                        <li><strong>index.js:</strong> The entry point for the React application, mounts React to the HTML.</li>\n                       <li><strong>App.js:</strong>  The root component of your React app.</li>\n                       <li><strong>Public Folder:</strong> Contains static assets like images, favicons, etc.</li>\n                        <li><strong>Components Folder:</strong> Typically where reusable components are stored.</li>\n                           <li><strong>Package.json:</strong> contains metadata of the project, scripts, and dependencies.</li>\n\n                    </ul>\n                    </p>\n                  <p><strong>Exam Content Examples:</strong></p>\n                <ul style=\"list-style-type: disc; margin-left: 20px;\">\n                     <li>Multiple choice: \"In a React app created with create-react-app, which file is typically the entry point for mounting React components into the HTML?\" Options: A) index.html B) App.js C) index.js D) package.json Answer: C) index.js</li>\n                    <li>Match the Following:  Match the file with its function: index.html, index.js, App.js</li>\n                     <li>Short answer: \"Describe the typical role of the `src` folder in a React project.\"</li>\n                </ul>\n            </li>\n            <li>\n                <strong>Introduction to components</strong>\n               <p>\n                    <ul>\n                         <li><strong>What are Components?:</strong> Reusable and independent parts of the UI.</li>\n                        <li><strong>Function Components:</strong>  JavaScript functions that return JSX.</li>\n                       <li><strong>Class Components:</strong> JavaScript classes that extend `React.Component`</li>\n                       <li><strong>Rendering Components:</strong>  How components are rendered and compose to build UIs.</li>\n                           <li><strong>Component Nesting:</strong> Components can be nested within each other</li>\n                          <li><strong>Props:</strong> How to pass data from parent components to child components.</li>\n\n                    </ul>\n                    </p>\n                 <p><strong>Exam Content Examples:</strong></p>\n                <ul style=\"list-style-type: disc; margin-left: 20px;\">\n                  <li> Multiple choice:  \"Which of the following best describes a component in React?\" Options: A) A simple HTML element B) A reusable and independent part of the UI C) A specific style for the UI D)  A function for fetching data Answer: B) A reusable and independent part of the UI</li>\n                      <li>Short Answer: \"Explain the difference between a function component and a class component\"</li>\n                       <li>Fill in the blank:  \"Data is passed from parent to child components via ____\". Answer: props</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n```\n"},
          ],
        },
      ],
    });





   export const GenerateFlashCards = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a flash card on topic: Flutter fundamentals, user Interface(UI) development, Basic App navigation in JSON formatwith the front back content maximum 15\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"flashcards\": [\n    {\n      \"front\": \"What are the core building blocks of a Flutter UI?\",\n      \"back\": \"Widgets! Everything in Flutter UI is a widget.\"\n    },\n    {\n      \"front\": \"Name 3 common layout widgets in Flutter.\",\n      \"back\": \"Container, Row, Column\"\n    },\n     {\n      \"front\": \"What does 'StatefulWidget' mean in Flutter?\",\n      \"back\": \"A widget that can change its appearance over time.\"\n     },\n    {\n      \"front\": \"What is the purpose of the `setState()` method?\",\n      \"back\": \"To trigger a UI rebuild when data changes.\"\n    },\n      {\n      \"front\": \"How do you navigate to a new screen?\",\n      \"back\": \"Using the Navigator widget with `Navigator.push()`\"\n     },\n     {\n      \"front\": \"How do you return to the previous screen?\",\n       \"back\":\"Using the `Navigator.pop()` function\"\n      },\n     {\n        \"front\": \"What is a 'Route' in Flutter?\",\n        \"back\":\"A named path to a specific screen or widget.\"\n     },\n      {\n        \"front\":\"What is a Material App\",\n        \"back\":\"It implements the material design in Flutter.\"\n       },\n       {\n        \"front\":\"What is Scaffold widget\",\n        \"back\":\"It implements the basic material design.\"\n        },\n     {\n       \"front\":\"What widget is use to add a button in flutter?\",\n       \"back\":\"ElevatedButton widget is use to add button\"\n     },\n     {\n        \"front\": \"What are 'StatelessWidgets'?\",\n        \"back\":\"Widgets whose properties cannot be modified after creation.\"\n      },\n       {\n         \"front\": \"How to pass data between screens in navigation\",\n         \"back\": \"By passing arguments in `Navigator.push()` or using global state management.\"\n       }\n\n  ]\n}\n```\n"},
          ],
        },
      ],
    });



   export const GenerateQuiz = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate Quiz on topic: Exception Handling in Python: Interview Prep with question and options along with correct answer in JSON format\n\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Exception Handling in Python: Interview Prep\",\n  \"questions\": [\n    {\n      \"questionId\": 1,\n      \"questionText\": \"What is an exception in Python?\",\n      \"options\": [\n        \"A type of loop\",\n        \"A function that performs mathematical operations\",\n        \"An event that occurs during program execution that disrupts the normal flow of instructions\",\n        \"A variable used to store data\"\n      ],\n      \"correctAnswer\": \"An event that occurs during program execution that disrupts the normal flow of instructions\",\n      \"explanation\": \"An exception is an error condition that disrupts the normal flow of a program, requiring specific handling to prevent crashes or unpredictable behavior.\"\n    },\n    {\n      \"questionId\": 2,\n      \"questionText\": \"Which keyword is used to begin a try block for exception handling?\",\n      \"options\": [\n        \"catch\",\n        \"except\",\n        \"try\",\n        \"handle\"\n      ],\n      \"correctAnswer\": \"try\",\n      \"explanation\": \"The 'try' keyword initiates a block of code where exceptions might occur. It's followed by an 'except' block to handle any exceptions that are raised.\"\n    },\n      {\n        \"questionId\": 3,\n      \"questionText\": \"Which keyword is used to specify the exception type to catch in an except block?\",\n      \"options\": [\n        \"finally\",\n        \"error\",\n         \"exception\",\n        \"ValueError\"\n       ],\n       \"correctAnswer\": \"ValueError\",\n        \"explanation\":\"The `except` keyword is followed by an exception class name that indicates the type of exception to catch.\"\n      },\n    {\n        \"questionId\": 4,\n        \"questionText\": \"What is the purpose of the `finally` block in exception handling?\",\n        \"options\": [\n            \"To catch all types of exceptions\",\n            \"To execute code regardless of whether an exception occurred or not\",\n           \"To skip the 'except' block\",\n           \"To halt the program execution\"\n          ],\n        \"correctAnswer\": \"To execute code regardless of whether an exception occurred or not\",\n        \"explanation\": \"The 'finally' block is guaranteed to execute regardless of whether an exception occurred in the 'try' block or not. It's typically used for cleanup tasks like closing files or releasing resources.\"\n      },\n    {\n      \"questionId\": 5,\n      \"questionText\": \"What happens if an exception occurs within a 'try' block and there's no matching 'except' block?\",\n      \"options\": [\n        \"The program continues execution normally.\",\n        \"The program enters the 'finally' block and then stops.\",\n        \"The program terminates, and an error message is displayed.\",\n        \"The exception is silently ignored.\"\n      ],\n      \"correctAnswer\": \"The program terminates, and an error message is displayed.\",\n      \"explanation\": \"If an exception occurs within a 'try' block and there is no matching 'except' block to handle it, the program will terminate abruptly, and an unhandled exception error will be printed to the console.\"\n    },\n     {\n      \"questionId\": 6,\n      \"questionText\": \"Which of the following is NOT a built-in exception type in Python?\",\n      \"options\": [\n        \"TypeError\",\n        \"FileNotFoundError\",\n        \"CustomError\",\n        \"IndexError\"\n      ],\n      \"correctAnswer\": \"CustomError\",\n       \"explanation\": \"While `TypeError`, `FileNotFoundError`, and `IndexError` are built-in exception types, `CustomError` is not. `CustomError` would usually be a user-defined exception class\"\n     },\n    {\n      \"questionId\": 7,\n      \"questionText\": \"How can you catch multiple exceptions in a single `except` block?\",\n      \"options\": [\n        \"Using multiple `except` blocks\",\n        \"By using `or` operator between exception types\",\n        \"By using a tuple of exception types\",\n        \"Using a single 'catch' block\"\n      ],\n      \"correctAnswer\": \"By using a tuple of exception types\",\n      \"explanation\":\"Multiple exceptions can be handled by listing them inside a tuple in a single 'except' block, i.e. `except (TypeError, ValueError):` \"\n    },\n    {\n        \"questionId\": 8,\n        \"questionText\":\"What is the purpose of the `else` block used along with try-except?\",\n        \"options\":[\n            \"To handle exceptions that were not specified in the except block\",\n            \"To execute if no exception is raised in the `try` block\",\n            \"To execute if any exception is raised in the `try` block\",\n            \"It has no purpose and should not be used\"\n           ],\n        \"correctAnswer\":\"To execute if no exception is raised in the `try` block\",\n        \"explanation\": \"The `else` block in a try-except construct executes if no exception is raised during the execution of the try block. This is useful for actions that should only be performed if the try block completes successfully.\"\n    },\n    {\n      \"questionId\": 9,\n      \"questionText\": \"Which statement is used to raise an exception intentionally?\",\n      \"options\": [\n        \"throw\",\n        \"raise\",\n        \"error\",\n        \"exception\"\n      ],\n      \"correctAnswer\": \"raise\",\n      \"explanation\": \"The `raise` statement is used to explicitly raise an exception in Python. You can raise either a built-in exception or a custom-defined exception.\"\n    },\n    {\n      \"questionId\": 10,\n        \"questionText\": \"What is a custom exception?\",\n        \"options\":[\n            \"A built-in exception with custom parameters.\",\n            \"A user-defined exception class that inherits from Exception class\",\n            \"An exception raised only by the OS.\",\n           \"An exception that is not handled.\"\n          ],\n          \"correctAnswer\":\"A user-defined exception class that inherits from Exception class\",\n        \"explanation\":\"A custom exception is a class that you create by inheriting from the base `Exception` class or any of its subclasses. This allows you to define specific exceptions for your application's needs.\"\n      }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });

    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
 